#!/bin/bash

unameOut="$(uname -s)"
case "${unameOut}" in
    Linux*)     az_cmd=az;;
    CYGWIN*)    az_cmd=az.cmd;;
    MINGW*)     az_cmd=az.cmd;;
    Darwin*)    az_cmd=az;;
    *)          echo "Sorry, your OS is probably unsupported"; exit 5
esac

function print_missing_tool () {
	echo "You'll need $1 tool in order this script to work."
        echo
        echo "Please install it with appropriate way for your system!"
        echo
      	exit 1
}

for tool in jq; do 
	if [ ! -x "$(which $tool 2>/dev/null)" ]; then print_missing_tool $tool; fi
done

if [ "$az_cmd" == "az" ]; then
	if [ ! -x "$(which az)" ]; then print_missing_tool az; fi
elif [ "$az_cmd" == "az.cmd" ]; then
	if ! where az.cmd &>/dev/null; then print_missing_tool az.cmd; fi
fi

function aksver() {
	$az_cmd aks list --query '[].[name, kubernetesVersion]'
}

# Checking if owerwrite flag is set
while [ -n "$1" ]; do
	case "$1" in 
		"-f")
		FORCE="--overwrite-existing"
		;;
		"-q")
		shift
		QUERY=$1
		;;
		"--")
		shift
		break
		;;
		*)
		;;
	esac
	shift
done


# Constructing JSON from input arguments array
if [ ${#@} -gt 0 ]; then
	x=("$@")
	JSON=$(printf '%s\n' "${x[@]}" | jq -R . | jq -s .)
fi

# Getting the list of subscriptions

[ -z "$JSON" ] && JSON=$($az_cmd account list --query '[].name')
length=$(jq -r '. | length' <<<$JSON)


for (( i = 0; i <= length - 1; i++ )); do 
	# Setting the subscription
	$az_cmd account set -s "$(jq -r ".[$i]" <<<$JSON)"
	if [ -n "$QUERY" ]; then
		$QUERY
	else
		# Getting the list of AKSes
		JSON2=$($az_cmd aks list --query "[].[name,resourceGroup]")
		length2=$(jq -r '. | length' <<<$JSON2)
		for (( j = 0; j <= length2 - 1; j++ )); do
			AKS=$(jq -r ".[$j][0]" <<<$JSON2)
			RG=$(jq -r ".[$j][1]" <<<$JSON2)
			# Merging the credentials per AKS
			if $az_cmd aks get-credentials --name "$AKS" --resource-group "$RG" $FORCE &>/dev/null; then
				echo "Successfully merged $AKS into Kube-config"
			else
				echo "$AKS merge failed"
			fi
		done
	fi
done
